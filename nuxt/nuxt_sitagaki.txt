version: '3'
services:
  app:
    container_name: "nuxt_demo_app"
    build:
      context: ./docker
      dockerfile: nginx.dockerfile
      args:
        - UID=${UID:-1000}
        - GID=${GID:-1000}
    ports:
      - "8081:80"
    volumes:
      - ./backend:/var/www/html
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - php
      - mysql
      - mailhog
    networks:
      - private

  php:
    container_name: "nuxt_demo_php"
    build:
      context: ./docker
      dockerfile: php.dockerfile
      args:
        - UID=${UID:-1000}
        - GID=${GID:-1000}
    ports:
      - "9000:9000"
    volumes:
      - ./backend:/var/www/html
    networks:
      - private

  frontend:
    container_name: "nuxt_demo_frontend"
    image: "node:18-alpine"
    ports:
      - "3000:3000"
    user: "node"
    working_dir: /myapp/frontend
    volumes:
      - ./frontend:/myapp/frontend
      - /myapp/frontend/node_modules
    environment:
      - HOST=0.0.0.0
      - NITRO_PRESET=node
    command: "yarn dev"

  mysql:
    container_name: "nuxt_demo_mysql"
    image: mysql:8.0
    ports:
      - 3308:3306
    environment:
      MYSQL_ROOT_PASSWORD: ''
      MYSQL_ALLOW_EMPTY_PASSWORD: 1
    volumes:
      - ./tmp/db:/var/lib/mysql
    networks:
      - private

  phpmyadmin:
    container_name: "nuxt_demo_phpmyadmin"
    image: phpmyadmin/phpmyadmin
    ports:
      - "8082:80"
    environment:
      PMA_HOST: mysql
    depends_on:
      - mysql
    networks:
      - private

  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "1026:1025"
      - "8026:8025"
    networks:
      - private

  cron:
    build:
      context: ./docker
      dockerfile: cron.dockerfile
    container_name: "nuxt_demo_cron"
    volumes:
      - ./backend:/var/www/html
    networks:
      - private

networks:
  private:
    driver: bridge




Windowsでnuxt.jsの開発環境手順を作成してています。続きを作成してください。docker-compose.yml作成とdocker起動など。

# 開発環境構築手順



localhost（自分のPCの環境）に開発環境を導入する手順を以下に記載します。

WindowsのWSL2上で動作するUbuntuアプリがインストールされ、そのUbuntu上でDockerが動作している状況で説明します。この環境にする方法は下記の最初の手順にて説明されています。

 Windowsでしたら下記のリンク先を参考にDocker環境をご用意ください。
 
 [Docker desktopを使わずWSL上で動作するUbuntuでDockerとdocker-composeを動かす](https://amaraimusi.sakura.ne.jp/note_prg/docker/docker-compose_note.html#sec1-4)


<br>

## 手順


### 準備

Git bash （Windows powershellでも良い）を起動し、ディレクトリを作成する。

```
mkdir nuxt_demo
```

docker-compose.yml を作成

以下の内容で docker-compose.yml を作成します。

```
touch docker-compose.yml

```

docker-compose.ymlをテキストエディタで開き以下の記述をします。

```
version: '3.8'
services:
  nuxt:
    image: node:18
    container_name: nuxt_app
    working_dir: /app
    volumes:
      - .:/app
    ports:
      - "3000:3000"
    command: ["sh", "-c", "npm install && npm run dev"]
    tty: true
    environment:
      - NODE_ENV=development
```

Dockerfileを作成します。

```
touch Dockerfile

```

Dockerfileに以下の記述をします。

```
FROM node:18
WORKDIR /app
COPY package.json package-lock.json ./
RUN npm install
COPY . ./
CMD ["npm", "run", "dev"]
```



$ cd /mnt/c/Users/user/git/nuxt_demo
```

■Dockerサービスを起動します。

```
$ sudo service docker start


Nuxt.js プロジェクトの作成
docker-compose run --rm nuxt npx nuxi init .










# 開発環境構築に必要なスキル

開発環境構築するにあたり下記についてある程度の知識が必要です。


- MySQL
- CLI（コマンドラインツール） / Linuxコマンド
- Git for windows
- Ubuntu(WindowsのWSL2上で動作するUbuntuアプリ Dockerを動かすコマンドラインツールとして仕様)
- Docker


# 開発環境構築手順



localhost（自分のPCの環境）に開発環境を導入する手順を以下に記載します。

WindowsのWSL2上で動作するUbuntuアプリがインストールされ、そのUbuntu上でDockerが動作している状況で説明します。この環境にする方法は下記の最初の手順にて説明されています。


<br>

## 手順


### 
Git bash （Windows powershellでも良い）を起動し、ディレクトリを作成する。

```
mkdir nuxt_demo
```




### Dockerが利用できる環境をご用意ください。

 Windowsでしたら下記のリンク先を参考にDocker環境をご用意ください。
 
 [Docker desktopを使わずWSL上で動作するUbuntuでDockerとdocker-composeを動かす](https://amaraimusi.sakura.ne.jp/note_prg/docker/docker-compose_note.html#sec1-4)
 
 上記はDocker desktopを使わない方法ですが、Windows環境の場合、Docker desktopを用いるとしてもwsl(WSL2)の設定は必要かと思われます。。上記のリンク先ページにはwslの設定のくだりもありますのでご確認ください。
 
 <br>
 
###

■ Git for windowsのGit Bashなどを起動し、プロジェクトを作成するディレクトリへ移動、プロジェクトのソースコード群をGitHubから取ってきます。

```
$ cd git
$ git clone git@github.com:AlecYawata/nuxt_demo.git
```

「git clone」後のプロジェクトのディレクトリパスの例→ 「C:\Users\user\git\nuxt_demo」


 <br>
 
 ■ 新しいブランチを作成する必要があるなら、ブランチを作成します。
 
 2024年4月の時点において、当開発手順書は以下のブランチのみに対応しています。mainブランチではログインできない不備が残っています。
 
```
origin/20231116_rich_menu_template2
origin/20240220_audience2
origin/20240402_tag
```

そのため、origin/20240402_tagを複製してブランチを作成する手順を示します。

origin/20240402_tagブランチをリモートからチェックアウトする

```
$ git checkout -b origin origin/20240402_tag
```

新しくブランチを作成、およびリモートブランチとして登録する

```
$ git branch new_branch
$ git checkout new_branch
$ git push --set-upstream origin new_branch
```
 
 ■ Git Bashでバックエンド関連のパッケージでインストールします。このインストールはComposerによるものです。

nuxt_demoディレクトリに存在するcomposer.pharをnuxt_demo/backendにコピーします。
そしてcomposer.lockを削除してから、以下のようにdocker-composeを通さず直接Composerでパッケージをインストールします。
インストールが終わったらcomposer.pharは不要なのでbackendディレクトリから削除します。

```
$ cp ./composer.phar ./backend/composer.phar
$ cd backend
$ rm composer.lock
$ php composer.phar install
$ rm composer.phar
```

※ docker-compose通して上記と同じ内容を行おうとすると失敗するようです。

<br>
 

■ Ubuntuを管理者権限で起動します。 (以降のコマンド実行はUbuntu、ただしGit関連はGit Bashで行ったほうが無難)


```

通常のWindows画面でUbuntuアイコンを右クリック→その他→「管理者として実行」を選択
```
 
 <br>


■プロジェクトをインストールしたディレクトリに「./tmp/db」ディレクトリを作成します。

```
$ mkdir -p tmp/db
```


```
C:\Users\user\git\nuxt_demo\tmp\db
```

<br>


■ Ubuntuのcdコマンドでプロジェクトのディレクトリへ移動します。


例


```
$ cd /mnt/c/Users/user/git/nuxt_demo
```

■Dockerサービスを起動します。

```
$ sudo service docker start
```

<br>

■ フロントエンド関連のパッケージをインストールします。

** 注意 ** Dockerコンテナ群の起動前に上記のインストールを実行すること。（docker-compose up -d コマンドを実行する前)Dockerコンテナ起動後にインストールするとViteが上手く動かなくなる。

```
$ rm frontend/yarn.lock
$ docker-compose run --rm frontend yarn install
```


<br>




■ docker-compose.ymlをWindowsのWSL2の環境に合わせて書き換えます。

mailhogが使用するポート番号1025,8025はWSL2が既に占有されてますので利用できません。なので1026と8026に書き換えてください。
なおWSL2はWindowsでDockerを動かすのに必須のプログラムなので強制終了させたりはしないでください。

【docker-compose.yml】

```

version: '3'
services:
  app:
    container_name: "nuxt_demo_app"
    build:
      context: ./docker
      dockerfile: nginx.dockerfile
      args:
        - UID=${UID:-1000}
        - GID=${GID:-1000}
    ports:
      - "8081:80"
    volumes:
      - ./backend:/var/www/html
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - php
      - mysql
      - mailhog
    networks:
      - private

  php:
    container_name: "nuxt_demo_php"
    build:
      context: ./docker
      dockerfile: php.dockerfile
      args:
        - UID=${UID:-1000}
        - GID=${GID:-1000}
    ports:
      - "9000:9000"
    volumes:
      - ./backend:/var/www/html
    networks:
      - private

  frontend:
    container_name: "nuxt_demo_frontend"
    image: "node:16.17-alpine"
    ports:
      - '8080:8080'
    user: "node"
    working_dir: /myapp/frontend
    volumes:
      - ./frontend:/myapp/frontend
    command: "yarn dev"

  mysql:
    container_name: "nuxt_demo_mysql"
    image: mysql:8.0
    ports:
      - 3308:3306
    environment:
      MYSQL_ROOT_PASSWORD: ''
      MYSQL_ALLOW_EMPTY_PASSWORD: 1
    volumes:
      - ./tmp/db:/var/lib/mysql
    networks:
      - private

  phpmyadmin:
    container_name: "nuxt_demo_phpmyadmin"
    image: phpmyadmin/phpmyadmin
    ports:
      - "8082:80"
    environment:
      PMA_HOST: mysql
    depends_on:
      - mysql
    networks:
      - private

  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "1026:1025"
      - "8026:8025"
    networks:
      - private

  cron:
    build:
      context: ./docker
      dockerfile: cron.dockerfile
    container_name: "nuxt_demo_cron"
    volumes:
      - ./backend:/var/www/html
    networks:
      - private

networks:
  private:
    driver: bridge
	
```

<br>



■Axiosとcsrf-cookieにおけるSPAの不具合対策 | httpの開発環境だとGETリクエストは正常なのにPOSTリクエストだけが419エラーになります。


【対策】
「app/Http/Middleware/VerifyCsrfToken.php」でCSRF保護を無効にするコードを記述します。本番環境では削除してください。


```
	namespace App\Http\Middleware;

	use Illuminate\Foundation\Http\Middleware\VerifyCsrfToken as Middleware;
	
	class VerifyCsrfToken extends Middleware
	{
	  protected $except = [
	  		'*', // CSRF保護を無効にする
	  ];
	}
```

■CORS関連の設定：「backend/config/sanctum.php」ファイルの下記部分を修正してください。

```
    'stateful' => explode(',', env('SANCTUM_STATEFUL_DOMAINS', sprintf(
		        '%s%s%s',
		        'localhost,localhost:8080,localhost:3000,127.0.0.1,127.0.0.1:8000,::1',
		        env('APP_URL') ? ','.parse_url(env('APP_URL'), PHP_URL_HOST) : '',
		        env('FRONTEND_URL') ? ','.parse_url(env('FRONTEND_URL'), PHP_URL_HOST) : ''
		    ))),
```

※ 別の記述方法

```
'stateful' => explode(',', env('SANCTUM_STATEFUL_DOMAINS', 'localhost,localhost:8080')),
```

当開発環境はフロントエンドのポートが8080番、バックエンドが8081番と分かれています。異なるポート間でデータやりとりするため上記のようなCORSの設定が必要になります。

<br>

■CORS関連の設定 その2: backend/config/cors.phpを以下のように書き換えます。

```
return [
		
		'paths' => ['*'],
		'allowed_methods' => ['*'],
		'allowed_origins' => [env('FRONTEND_URL', 'http://localhost:8080')],
		'allowed_origins_patterns' => [],
		'allowed_headers' => ['*'],
		'exposed_headers' => [],
		'max_age' => 600,
		'supports_credentials' => true,
		
];
```

<br>

■Viteの設定を書き換えます。

Windows/WSL2環境に合わせてViteの設定をする必要があります。「vite.config.ts」を以下のように書き換えてください

./vite.config.ts

```
import { defineConfig } from 'vite'
import { resolve } from "path";
import react from '@vitejs/plugin-react'
import svgr from "vite-plugin-svgr";

// https://vitejs.dev/config/
export default defineConfig({
  server: {
    host: true,
    port: 8080,
    watch: {
	    usePolling: true,
	    interval: 3000
    },
    hmr: {
        host: 'localhost'
    },
  },
  plugins: [svgr(), react()],
  resolve: {
    alias: {
      lib: resolve(__dirname, "src/lib"),
      routes: resolve(__dirname, "src/routes"),
    },
  },
})

```

■ docker-compose.ymlの設定に基づいてDockerコンテナ群を生成、ならびに生成したDockerコンテナ群を起動します。

```
$ docker-compose up -d
```

何らかの理由で失敗してしまった場合、下記コマンドでDockerコンテナ群をすべて削除されます。その際、./tmp/db内のファイルもすべて削除してください。その後、修正して「$ docker-compose up -d」を再実行してください。

```
$ docker-compose down --rmi all -v
```

<br>

■以下のURLからphpMyAdminにアクセスします。

http://localhost:8082

ユーザー名は「root」、パスワードはなしでログイン可能です。

<br>

■phpMyAdminにてDBのユーザーアカウントを追加で作成します。

トップメニューの「ユーザーアカウント」→「ユーザアカウントを追加する」

ユーザー名とパスワード名は任意ですが、パスワードは必ず入力してください。また、グローバル権限はすべてにチェックします。

（例）

```
ユーザー名：neko
パスワード：neko123
権限：グローバル権限 すべて
```

<br>

■phpMyAdminにて新しいデータベースを「nuxt_demo_dev」の名前で作成します。照合順序は「utf8mb4_general_ci」でよいと思われます。

<br>

■ phpMyAdminでnuxt_demo_devデータベースを開き、「doc/nuxt_demo_dev(日時).sql」をインポートします。

<br>

■ マイグレーションを実行します。

```
$ docker-compose exec php php artisan migrate
```

※ マイグレーションを実行する前に「docker-compose exec php php artisan migrate:status」コマンドでどこまでマイグレーションが適用されているか確認できます。

<br>

■ backendディレクに移動し、.envファイルを新規作成し、以下のように記述します。

※MAIL関連は未検証ため試行錯誤が必要です。

```

APP_NAME=Laravel
APP_ENV=local
APP_KEY=base64:9l3PtoHjp22BH/2GnMdjA/OruQeCYVIean2lhrUkyu4=
APP_DEBUG=true
APP_URL=http://localhost:8081
FRONTEND_URL=http://localhost:8080
SANCTUM_STATEFUL_DOMAINS=localhost:8080

LOG_CHANNEL=stack
LOG_DEPRECATIONS_CHANNEL=null
LOG_LEVEL=debug

DB_CONNECTION=mysql
DB_HOST=mysql
DB_PORT=3306
DB_DATABASE=nuxt_demo_dev
DB_USERNAME=neko
DB_PASSWORD=neko123


BROADCAST_DRIVER=log
CACHE_DRIVER=file
FILESYSTEM_DISK=local
QUEUE_CONNECTION=sync
SESSION_DRIVER=file
SESSION_LIFETIME=120

MEMCACHED_HOST=127.0.0.1

REDIS_HOST=127.0.0.1
REDIS_PASSWORD=null
REDIS_PORT=6379

MAIL_MAILER=ses
MAIL_HOST=mailhog
MAIL_PORT=1025
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_ENCRYPTION=null
MAIL_FROM_ADDRESS="noreply@nuxt_demo-mail.botfor.net"
MAIL_FROM_NAME="${APP_NAME}"

AWS_ACCESS_KEY_ID=AKIAXQK7QN5B7RJWEYMG
AWS_SECRET_ACCESS_KEY=tNEJQ--省略--VYTnO
AWS_DEFAULT_REGION=ap-northeast-1
AWS_BUCKET=lone-uploads
AWS_USE_PATH_STYLE_ENDPOINT=false

PUSHER_APP_ID=
PUSHER_APP_KEY=
PUSHER_APP_SECRET=
PUSHER_HOST=
PUSHER_PORT=443
PUSHER_SCHEME=https
PUSHER_APP_CLUSTER=mt1

VITE_PUSHER_APP_KEY="${PUSHER_APP_KEY}"
VITE_PUSHER_HOST="${PUSHER_HOST}"
VITE_PUSHER_PORT="${PUSHER_PORT}"
VITE_PUSHER_SCHEME="${PUSHER_SCHEME}"
VITE_PUSHER_APP_CLUSTER="${PUSHER_APP_CLUSTER}"


```


<br>




■Viteを起動させるため、dockerを再起動する

```
$ docker-compose stop
$ docker-compose up -d
```


■ 以下のURLをブラウザに入力し、システム画面が表示されれば成功です。初回の画面立ち上げには数分の時間を要することがあります。

```
http://localhost:8080
```

```
$ docker-compose run --rm frontend yarn run dev
```

テスト用ログインアカウント情報

```
ID：alec@test.com
PW：AQH2qby-xjr1npb*nyg
```

<br>

■ 必須ではありませんが以下のファイルを自分の環境だけ管理対象外にすると便利です。

```

git update-index --assume-unchanged backend/app/Http/Middleware/VerifyCsrfToken.php
git update-index --assume-unchanged docker-compose.yml
git update-index --assume-unchanged backend/composer.lock
git update-index --assume-unchanged backend/config/cors.php
git update-index --assume-unchanged backend/config/sanctum.php
git update-index --assume-unchanged frontend/vite.config.ts
git update-index --assume-unchanged frontend/yarn.lock

```

※ 「git update-index --assume-unchanged」コマンドはリモートリポジトリで管理されているファイルを自分の開発環境だけ管理対象外にする。 解除もできる。

-------------------

<br>


# 開発で活用するコマンド

### 開発環境構築後の開発環境立ち上げ（WindowsのUbuntuでDocker立ち上げ）

平時の開発環境の立ち上げは次の手順で行います。管理者権限でUbuntuを開き、Dockerサービス開始、Dockerコンテナ群を起動、Viteを起動します。

```
cd /mnt/c/Users/user/git/nuxt_demo
sudo service docker start
docker-compose up -d
```

<br>

### 開発環境と閉じる:Dockerを終了

```
docker-compose stop
sudo service docker stop
```

<br>

### フロントエンドの本番用ビルド

```
docker-compose run --rm frontend yarn vite build
```

**【要注意】** 以下のコマンドではビルドできないので注意してください。(別物です）

docker-compose run --rm frontend yarn build

<br>

### Laravelのartisanコマンドを使う

```
docker-compose exec php php artisan ○○○
```

(例)

docker-compose exec php php artisan migrate:status


<br>

### 起動中のDockerコンテナ一覧を確認する

```
docker ps
```

<br>

### Dockerコンテナをすべて削除する

docker-compose.ymlの記述に不備があり、一旦すべてのDockerコンテナをすべて削除したい場合。

```
docker-compose down --rmi all -v
```

<br>


### マイグレーション関連

マイグレーションがどこまて適用されているか確認します。マイグレーション前には必ずこのコマンドで確認を。

```
docker-compose exec php php artisan migrate:status
```

マイグレーションを実行します。

```
docker-compose exec php php artisan migrate
```

マイグレーション実行のステップを１つ前の状態に戻します。

```
docker-compose exec php php artisan migrate:rollback --step=1
```

サンドボックスデータを投入します。（RichMenuAreasTableSeederは一例です。用途に合わせて書き換えてください）

```
docker-compose exec php php artisan db:seed --class=RichMenuAreasTableSeeder
```

<br>


### mysqlコマンドを使う

```
docker exec -it nuxt_demo_mysql bash
mysql -u root -p
```

<br>



